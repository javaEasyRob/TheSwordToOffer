package java.two;

/**
 * ClassName NumberOfOne01<br>
 * Function <br>
 * <p>
 * 题目描述
 * 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
 * </p>
 * 解题思路:
 * <p>
 * 如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来
 * 处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面
 * 还有0的话)。其余所有位将不会受到影响。
 * 举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变
 * 成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结
 * 果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后
 * 的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&1011=1000.
 * 也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个
 * 整数的二进制有多少个1，就可以进行多少次这样的操作。
 * </p>
 *
 * @author 辛江勇
 * @version 1.0.0
 */
public class NumberOfOne01 {
    public int numberOf1(int target) {
        int count = 0;
        while (target != 0) {
            count++;
            target = (target - 1) & target;
        }
        return count;
    }
}
